<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<!--
    Built base on the following templates:
        http://blog.csdn.net/will_awoke/article/details/12705611
        http://blog.csdn.net/yang1982_0907/article/details/18086693
        https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml

    More details about check style:
        http://checkstyle.sourceforge.net/checks.html
 -->

<module name="Checker">
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="error"/>

    <property name="fileExtensions" value="java, properties, xml"/>

    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="RegexpSingleline">
        <!-- \s matches whitespace character, $ matches end of line. -->
        <property name="format" value="\s+$"/>
        <property name="message" value="Trailing whitespace is prohibited, but found."/>
    </module>

    <module name="RegexpMultiline">
        <property name="format" value="(?s:(\r\n|\r).*)"/>
        <property name="message" value="CRLF and CR line endings are prohibited, but this file uses them."/>
    </module>

    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <module name="SuppressWarningsFilter"/>

    <module name="TreeWalker">
        <module name="SuppressWarningsHolder"/>
        <module name="OuterTypeFilename"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message"
                      value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>

        <module name="LineLength">
            <property name="max" value="140"/>
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
        </module>

        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="4"/>
        </module>
        <module name="CommentsIndentation"/>

        <module name="AvoidStarImport"/>
        <module name="AvoidStaticImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
        <module name="CustomImportOrder">
            <property name="customImportOrderRules"
                      value="THIRD_PARTY_PACKAGE###SPECIAL_IMPORTS###STANDARD_JAVA_PACKAGE###STATIC"/>
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="separateLineBetweenGroups" value="true"/>
        </module>

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalFinalVariableName"/>
        <module name="StaticVariableName">
            <property name="format" value="(^[A-Z]([A-Z0-9_]*)?$)"/>
        </module>
        <module name="ConstantName">
            <property name="format" value="(^[A-Z]([A-Z0-9_]*)?$)"/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="EmptyForInitializerPad"/>
        <module name="EmptyForIteratorPad"/>
        <module name="TypecastParenPad"/>
        <module name="MethodParamPad"/>
        <module name="ParenPad"/>
        <module name="SingleSpaceSeparator"/>
        <module name="WhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="NoWhitespaceAfter"/>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>

        <module name="NeedBraces"/>
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected|ignored"/>
        </module>
        <module name="LeftCurly">
            <property name="option" value="eol"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>

        <module name="ArrayTypeStyle"/>
        <module name="BooleanExpressionComplexity"/>
        <module name="CovariantEquals"/>
        <module name="DeclarationOrder"/>
        <module name="DeclarationOrderCheck"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyStatement"/>
        <module name="EqualsAvoidNull"/>
        <module name="EqualsHashCode"/>
        <module name="ExplicitInitialization"/>
        <module name="FallThrough"/>
        <module name="FinalClass"/>
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
        </module>
        <module name="InnerAssignment"/>
        <module name="InnerTypeLast"/>
        <module name="MagicNumber"/>
        <module name="MissingSwitchDefault"/>
        <module name="ModifiedControlVariable">
            <property name="skipEnhancedForLoopVariable" value="true"/>
        </module>
        <module name="ModifierOrder"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="OneStatementPerLine"/>
        <module name="OneTopLevelClass"/>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="OuterTypeFilename"/>
        <!--<module name="ParameterNumber">-->
            <!--<property name="max" value="5"/>-->
        <!--</module>-->
        <module name="RedundantModifier"/>
        <module name="RequireThis">
            <property name="checkMethods" value="false"/>
        </module>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="UnnecessaryParentheses"/>
        <module name="UpperEll"/>
        <module name="UncommentedMain">
            <property name="excludedClasses" value="\.*Main$"/>
        </module>
        <module name="VariableDeclarationUsageDistance">
            <property name="allowedDistance" value="5"/>
        </module>
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
        </module>

        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
        </module>
        <module name="NoLineWrap"/>

        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="3"/>
            <property name="allowedAbbreviations" value="JSON,XML,URL,ECPM"/>
        </module>

        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>

        <!-- misc.: project-specific & customized check -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="org.apache.commons.lang.StringUtils"/>
            <property name="message" value="Use 'org.apache.commons.lang3.StringUtils' instead"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="Integer..?parseInt|Integer..?valueOf"/>
            <property name="message" value="Integer.parseInt (or Integer.valueOf) was found, please use ConvertUtil.tryParseInteger instead"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="Long..?parseLong|Long..?valueOf"/>
            <property name="message" value="Long.parseLong (or Long.valueOf) was found, please use ConvertUtil.tryParseLong instead"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="Double..?parseDouble|Double..?valueOf"/>
            <property name="message" value="Double.parseDouble (or Double.valueOf) was found, please use ConvertUtil.tryParseDouble instead"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.out\.print"/>
            <property name="message" value="Use Logging API instead"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="!StringUtils.isBlank"/>
            <property name="message" value="Use StringUtils.isNotBlank instead"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="StringUtils.join"/>
            <property name="message" value="Use String.join instead"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="null ==|null !="/>
            <property name="message" value="null == xxx (or null != xxx) was found, please follow the xxx == null (or xxx != null) style instead"/>
        </module>
    </module>
</module>
